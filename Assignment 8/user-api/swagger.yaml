openapi: 3.0.0
info:
  title: User Management API
  description: API for managing users and image uploads
  version: 1.0.0
servers:
  - url: http://localhost:8000
    description: Local development server
tags:
  - name: Users
    description: User management operations

paths:
  /user:
    post:
      tags:
        - Users
      summary: Create a new user
      description: Creates a new user with validated full name, email, and password.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                fullName:
                  type: string
                  example: "John Doe"
                  description: User's full name (only alphabetic characters)
                email:
                  type: string
                  format: email
                  example: "john.doe@example.com"
                  description: User's email address (must be valid format)
                password:
                  type: string
                  format: password
                  example: "StrongPass123!"
                  description: Password (min 8 chars, uppercase, lowercase, digit, special char)
              required:
                - fullName
                - email
                - password
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "User created successfully."
        '400':
          description: Validation failed
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Validation failed."

  /user/edit:
    put:
      tags:
        - Users
      summary: Update user details
      description: Updates a user's full name and/or password. Email cannot be updated.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  example: "john.doe@example.com"
                  description: User's email address (required to identify user)
                fullName:
                  type: string
                  example: "John Smith"
                  description: User's new full name (only alphabetic characters)
                password:
                  type: string
                  format: password
                  example: "NewStrongPass123!"
                  description: New password (min 8 chars, uppercase, lowercase, digit, special char)
              required:
                - email
      responses:
        '200':
          description: User updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "User details updated successfully."
        '400':
          description: Validation failed
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Validation failed."
        '404':
          description: User not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "User not found."

  /getUser:
    get:
      tags:
        - Users
      summary: Retrieve all users
      description: Gets a list of all users in the database.
      responses:
        '200':
          description: List of users
          content:
            application/json:
              schema:
                type: object
                properties:
                  users:
                    type: array
                    items:
                      type: object
                      properties:
                        fullName:
                          type: string
                          example: "John Doe"
                        email:
                          type: string
                          example: "john.doe@example.com"

  /user/uploadImage:
    post:
      tags:
        - Users
      summary: Upload user image
      description: Uploads an image for a specific user. Only one image per user is allowed.
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  description: User's email address
                  example: "john.doe@example.com"
                image:
                  type: string
                  format: binary
                  description: Image file (JPEG, PNG, or GIF only)
              required:
                - email
                - image
      responses:
        '201':
          description: Image uploaded successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Image uploaded successfully."
                  filePath:
                    type: string
                    example: "/images/1617293456789-123456789.jpg"
        '400':
          description: Invalid file format or user already has an image
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Invalid file format. Only JPEG, PNG, and GIF are allowed."
        '404':
          description: User not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "User not found."

  /user/{email}:
    delete:
      tags:
        - Users
      summary: Delete user
      description: Deletes a user by their email address.
      parameters:
        - in: path
          name: email
          required: true
          schema:
            type: string
            format: email
          description: Email address of the user to delete
          example: "john.doe@example.com"
      responses:
        '200':
          description: User deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "User deleted successfully."
        '404':
          description: User not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "User not found."

components:
  schemas:
    User:
      type: object
      properties:
        fullName:
          type: string
          description: User's full name (only alphabetic characters)
        email:
          type: string
          format: email
          description: User's email address
        password:
          type: string
          format: password
          description: User's password (hashed when stored)
        imagePath:
          type: string
          nullable: true
          description: Path to the user's uploaded image (if any)
      required:
        - fullName
        - email
        - password